# Conditional jump instruction tests
# Format: RawBytes;Instructions
RawBytes;Instructions

# One-byte conditional jumps (opcodes 70-7F) with rel8
7010;[{ "Type": "Jo", "Operands": ["0x00000012"] }]
71FE;[{ "Type": "Jno", "Operands": ["0x00000000"] }]
7210;[{ "Type": "Jb", "Operands": ["0x00000012"] }]
73FE;[{ "Type": "Jae", "Operands": ["0x00000000"] }]
7410;[{ "Type": "Jz", "Operands": ["0x00000012"] }]
75FE;[{ "Type": "Jnz", "Operands": ["0x00000000"] }]
7610;[{ "Type": "Jbe", "Operands": ["0x00000012"] }]
77FE;[{ "Type": "Ja", "Operands": ["0x00000000"] }]
7810;[{ "Type": "Js", "Operands": ["0x00000012"] }]
79FE;[{ "Type": "Jns", "Operands": ["0x00000000"] }]
7A10;[{ "Type": "Jp", "Operands": ["0x00000012"] }]
7BFE;[{ "Type": "Jnp", "Operands": ["0x00000000"] }]
7C10;[{ "Type": "Jl", "Operands": ["0x00000012"] }]
7DFE;[{ "Type": "Jge", "Operands": ["0x00000000"] }]
7E10;[{ "Type": "Jle", "Operands": ["0x00000012"] }]
7FFE;[{ "Type": "Jg", "Operands": ["0x00000000"] }]

# Two-byte conditional jumps (opcodes 0F 80-8F) with rel32
0F8010000000;[{ "Type": "Jo", "Operands": ["0x00000016"] }]
0F81FEFFFFFF;[{ "Type": "Jno", "Operands": ["0x00000004"] }]
0F8210000000;[{ "Type": "Jb", "Operands": ["0x00000016"] }]
0F83FEFFFFFF;[{ "Type": "Jae", "Operands": ["0x00000004"] }]
0F8410000000;[{ "Type": "Jz", "Operands": ["0x00000016"] }]
0F85FEFFFFFF;[{ "Type": "Jnz", "Operands": ["0x00000004"] }]
0F8610000000;[{ "Type": "Jbe", "Operands": ["0x00000016"] }]
0F87FEFFFFFF;[{ "Type": "Ja", "Operands": ["0x00000004"] }]
0F8810000000;[{ "Type": "Js", "Operands": ["0x00000016"] }]
0F89FEFFFFFF;[{ "Type": "Jns", "Operands": ["0x00000004"] }]
0F8A10000000;[{ "Type": "Jp", "Operands": ["0x00000016"] }]
0F8BFEFFFFFF;[{ "Type": "Jnp", "Operands": ["0x00000004"] }]
0F8C10000000;[{ "Type": "Jl", "Operands": ["0x00000016"] }]
0F8DFEFFFFFF;[{ "Type": "Jge", "Operands": ["0x00000004"] }]
0F8E10000000;[{ "Type": "Jle", "Operands": ["0x00000016"] }]
0F8FFEFFFFFF;[{ "Type": "Jg", "Operands": ["0x00000004"] }]
