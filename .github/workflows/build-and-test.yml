name: Build and Test

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
      - '.editorconfig'
      - '**/*.DotSettings*'
      - 'LICENSE'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
      - '.editorconfig'
      - '**/*.DotSettings*'
      - 'LICENSE'
  workflow_dispatch: # Allow manual triggering
    inputs:
      run_windows_build:
        description: 'Run Windows build'
        required: false
        default: false
        type: boolean
      run_macos_build:
        description: 'Run macOS build'
        required: false
        default: false
        type: boolean

# Prevent concurrent builds of the same branch to save resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Ubuntu build - always runs
  build-ubuntu:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        # Include Directory.Packages.props in the cache key since it contains all package versions
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-${{ hashFiles('Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      
    - name: Publish CfgVisualizer
      run: dotnet publish VibeDisasm.CfgVisualizer/VibeDisasm.CfgVisualizer.csproj --configuration ${{ env.CONFIGURATION }} --output ./publish/CfgVisualizer
      
    - name: Upload CfgVisualizer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cfg-visualizer
        path: |
          ./publish/CfgVisualizer/**/*
        retention-days: 7
  
  # Windows build - optional
  build-windows:
    # Only run when explicitly requested via workflow_dispatch
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_windows_build == 'true'
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        # Include Directory.Packages.props in the cache key since it contains all package versions
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-${{ hashFiles('Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
        
  # macOS build - optional
  build-macos:
    # Only run when explicitly requested via workflow_dispatch
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_macos_build == 'true'
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        # Include Directory.Packages.props in the cache key since it contains all package versions
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-${{ hashFiles('Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Test
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      
  code-coverage:
    runs-on: ubuntu-latest
    needs: build-ubuntu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        # Include Directory.Packages.props in the cache key since it contains all package versions
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-${{ hashFiles('Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}-
          ${{ runner.os }}-nuget-
    
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    
    - name: Test with coverage
      run: |
        dotnet restore
        dotnet test --configuration ${{ env.CONFIGURATION }} --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
    
    - name: Generate coverage report
      run: reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"./CoverageReport" -reporttypes:"HtmlInline_AzurePipelines;Cobertura;Badges"
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ./CoverageReport
        retention-days: 14

